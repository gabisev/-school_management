#!/usr/bin/env python
"""
Script pour cr√©er des donn√©es d'emploi du temps pour les √©l√®ves
"""

import os
import sys
import django
from datetime import time, datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_system.settings')
django.setup()

from school_management.models import (
    Salle, Creneau, EmploiDuTemps, Classe, Matiere, Professeur
)

def create_creneaux():
    """Cr√©er les cr√©neaux horaires"""
    print("Cr√©ation des cr√©neaux horaires...")
    
    # Cr√©neaux pour une journ√©e type
    creneaux_data = [
        # Lundi
        ('LUNDI', time(8, 0), time(9, 0), 60, False),
        ('LUNDI', time(9, 0), time(10, 0), 60, True),  # R√©cr√©ation
        ('LUNDI', time(10, 15), time(11, 15), 60, False),
        ('LUNDI', time(11, 15), time(12, 15), 60, False),
        ('LUNDI', time(14, 0), time(15, 0), 60, False),
        ('LUNDI', time(15, 0), time(16, 0), 60, True),  # R√©cr√©ation
        ('LUNDI', time(16, 15), time(17, 15), 60, False),
        
        # Mardi
        ('MARDI', time(8, 0), time(9, 0), 60, False),
        ('MARDI', time(9, 0), time(10, 0), 60, True),
        ('MARDI', time(10, 15), time(11, 15), 60, False),
        ('MARDI', time(11, 15), time(12, 15), 60, False),
        ('MARDI', time(14, 0), time(15, 0), 60, False),
        ('MARDI', time(15, 0), time(16, 0), 60, True),
        ('MARDI', time(16, 15), time(17, 15), 60, False),
        
        # Mercredi
        ('MERCREDI', time(8, 0), time(9, 0), 60, False),
        ('MERCREDI', time(9, 0), time(10, 0), 60, True),
        ('MERCREDI', time(10, 15), time(11, 15), 60, False),
        ('MERCREDI', time(11, 15), time(12, 15), 60, False),
        
        # Jeudi
        ('JEUDI', time(8, 0), time(9, 0), 60, False),
        ('JEUDI', time(9, 0), time(10, 0), 60, True),
        ('JEUDI', time(10, 15), time(11, 15), 60, False),
        ('JEUDI', time(11, 15), time(12, 15), 60, False),
        ('JEUDI', time(14, 0), time(15, 0), 60, False),
        ('JEUDI', time(15, 0), time(16, 0), 60, True),
        ('JEUDI', time(16, 15), time(17, 15), 60, False),
        
        # Vendredi
        ('VENDREDI', time(8, 0), time(9, 0), 60, False),
        ('VENDREDI', time(9, 0), time(10, 0), 60, True),
        ('VENDREDI', time(10, 15), time(11, 15), 60, False),
        ('VENDREDI', time(11, 15), time(12, 15), 60, False),
        ('VENDREDI', time(14, 0), time(15, 0), 60, False),
        ('VENDREDI', time(15, 0), time(16, 0), 60, True),
        ('VENDREDI', time(16, 15), time(17, 15), 60, False),
    ]
    
    creneaux_created = 0
    for jour, heure_debut, heure_fin, duree, pause in creneaux_data:
        creneau, created = Creneau.objects.get_or_create(
            jour=jour,
            heure_debut=heure_debut,
            heure_fin=heure_fin,
            defaults={
                'duree_minutes': duree,
                'pause': pause
            }
        )
        if created:
            creneaux_created += 1
    
    print(f"‚úÖ {creneaux_created} cr√©neaux cr√©√©s")
    return Creneau.objects.all()

def create_emplois_du_temps():
    """Cr√©er des emplois du temps pour les classes"""
    print("Cr√©ation des emplois du temps...")
    
    # R√©cup√©rer les donn√©es n√©cessaires
    classes = Classe.objects.all()
    matieres = Matiere.objects.all()
    professeurs = Professeur.objects.all()
    salles = Salle.objects.all()
    creneaux = Creneau.objects.all()
    
    if not classes.exists():
        print("‚ùå Aucune classe trouv√©e. Cr√©ez d'abord des classes.")
        return
    
    if not matieres.exists():
        print("‚ùå Aucune mati√®re trouv√©e. Cr√©ez d'abord des mati√®res.")
        return
    
    if not professeurs.exists():
        print("‚ùå Aucun professeur trouv√©. Cr√©ez d'abord des professeurs.")
        return
    
    if not salles.exists():
        print("‚ùå Aucune salle trouv√©e. Cr√©ez d'abord des salles.")
        return
    
    emplois_created = 0
    
    # Cr√©er un emploi du temps pour chaque classe
    for classe in classes:
        print(f"  Cr√©ation de l'emploi du temps pour {classe.nom}...")
        
        # Mati√®res principales pour chaque niveau
        matieres_principales = {
            '6√®me': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            '5√®me': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            '4√®me': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            '3√®me': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            '2nde': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            '1√®re': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
            'Terminale': ['Math√©matiques', 'Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Sciences', 'EPS'],
        }
        
        # Obtenir les mati√®res pour ce niveau
        niveau_matiere = matieres_principales.get(classe.niveau, matieres_principales['6√®me'])
        matieres_classe = matieres.filter(nom__in=niveau_matiere)
        
        # Cr√©er des emplois pour chaque jour
        jours = ['LUNDI', 'MARDI', 'MERCREDI', 'JEUDI', 'VENDREDI']
        creneaux_par_jour = {}
        
        for jour in jours:
            creneaux_par_jour[jour] = list(creneaux.filter(jour=jour, pause=False).order_by('heure_debut'))
        
        # Distribuer les mati√®res sur les cr√©neaux
        matiere_index = 0
        for jour in jours:
            creneaux_jour = creneaux_par_jour[jour]
            
            for i, creneau in enumerate(creneaux_jour):
                if matieres_classe.exists():
                    matiere = matieres_classe[matiere_index % len(matieres_classe)]
                    professeur = professeurs[matiere_index % len(professeurs)]
                    salle = salles[matiere_index % len(salles)]
                    
                    emploi, created = EmploiDuTemps.objects.get_or_create(
                        classe=classe,
                        creneau=creneau,
                        defaults={
                            'matiere': matiere,
                            'professeur': professeur,
                            'salle': salle,
                            'type_cours': 'COURS',
                            'annee_scolaire': '2024-2025',
                            'semestre': 1,
                            'actif': True,
                            'commentaire': f'Cours de {matiere.nom}'
                        }
                    )
                    
                    if created:
                        emplois_created += 1
                    
                    matiere_index += 1
    
    print(f"‚úÖ {emplois_created} emplois du temps cr√©√©s")

def main():
    """Fonction principale"""
    print("üöÄ Cr√©ation des donn√©es d'emploi du temps pour les √©l√®ves...")
    print("=" * 60)
    
    try:
        # Cr√©er les cr√©neaux
        creneaux = create_creneaux()
        
        # Cr√©er les emplois du temps
        create_emplois_du_temps()
        
        print("=" * 60)
        print("‚úÖ Donn√©es d'emploi du temps cr√©√©es avec succ√®s !")
        print("\nüìä R√©sum√© :")
        print(f"   - Cr√©neaux : {Creneau.objects.count()}")
        print(f"   - Emplois du temps : {EmploiDuTemps.objects.count()}")
        print(f"   - Classes : {Classe.objects.count()}")
        print(f"   - Mati√®res : {Matiere.objects.count()}")
        print(f"   - Professeurs : {Professeur.objects.count()}")
        print(f"   - Salles : {Salle.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es : {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()




